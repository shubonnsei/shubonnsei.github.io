<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>重学Laravel小记</title>
    <link href="/2023/08/11/%E9%87%8D%E5%AD%A6Laravel%E5%B0%8F%E8%AE%B0/"/>
    <url>/2023/08/11/%E9%87%8D%E5%AD%A6Laravel%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="重学Laravel小记"><a href="#重学Laravel小记" class="headerlink" title="重学Laravel小记"></a>重学Laravel小记</h1><h2 id="记一次搭建开发环境阶段修改Bug的经历"><a href="#记一次搭建开发环境阶段修改Bug的经历" class="headerlink" title="记一次搭建开发环境阶段修改Bug的经历"></a>记一次搭建开发环境阶段修改Bug的经历</h2><p>笔者已于很早的时候安装过wsl+docker以求在这样的开发环境之下学习开发Laravel。</p><p>今天笔者睽违已久打开终端搭载的ubuntu试图使用以下命令（注：该命令也只允许在进驻到开发项目中启动才有卵用）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/vendor/</span>bin/sail up<br></code></pre></td></tr></table></figure><p>然而显示的结果却是如是</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[+] Running 6/6<br> ⠿ Container example-app-redis<span class="hljs-string">-1</span>         Running                                                           0.0s<br> ⠿ Container example-app-meilisearch<span class="hljs-string">-1</span>   Running                                                           0.0s<br> ⠿ Container example-app-mysql<span class="hljs-string">-1</span>         Created                                                           0.0s<br> ⠿ Container example-app-mailhog<span class="hljs-string">-1</span>       Running                                                           0.0s<br> ⠿ Container example-app-selenium<span class="hljs-string">-1</span>      Running                                                           0.0s<br> ⠿ Container example-app-laravel.test<span class="hljs-string">-1</span>  Recreated                                                         1.6s<br>Attaching to example-app-laravel.test<span class="hljs-string">-1</span>, example-app-mailhog<span class="hljs-string">-1</span>, example-app-meilisearch<span class="hljs-string">-1</span>, example-app-mysql<span class="hljs-string">-1</span>, example-app-redis<span class="hljs-string">-1</span>, example-app-selenium<span class="hljs-string">-1</span><br><span class="hljs-keyword">Error </span>response from daemon: Ports are not available: exposing port TCP 0.0.0.0:3306 -&gt; 0.0.0.0:0: listen tcp 0.0.0.0:3306: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.<br></code></pre></td></tr></table></figure><p>核心重点自然是最后的一段话，3306端口出了很大的问题。通常情况下，出现这个问题的原因可能有：</p><ol><li><strong>端口冲突：</strong> 可能已经有一个进程在使用端口 <code>3306</code>，或者该端口已经被其他容器占用。</li><li><strong>网络策略或防火墙：</strong> 系统的网络策略或防火墙可能会限制端口映射，导致 Docker 无法绑定到指定的端口。</li><li><strong>Docker 网络问题：</strong> Docker 网络可能出现问题，可能需要重启 Docker 守护进程或清理无用的网络。</li><li><strong>其他配置问题：</strong> 可能存在其他配置问题，例如 Docker Compose 配置或其他容器相关的配置。</li></ol><p>我个人隐隐约约感觉到因为第一个原因出错的可能性很大，于是打开powershell开始排查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">PS CC:\&gt; netstat -ano | Select-String &quot;:3306&quot;<br><br>  TCP    0.0.0.0:3306           0.0.0.0:0<br>       LISTENING       5708<br>  TCP    0.0.0.0:33060          0.0.0.0:0<br>       LISTENING       5708<br>  TCP    [::]:3306              [::]:0<br>       LISTENING       5708<br>  TCP    [::]:33060             [::]:0<br>       LISTENING       5708<br></code></pre></td></tr></table></figure><p>查出占用3306端口的进程是5708，至此问题已经基本解决大半了。于是进一步调查5708的进程名称是什么</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">PS C:\&gt; Get-Process -Id 5708 | Select-Object Name, Path<br><br>Name   Path<br>----   ----<br>mysqld<br></code></pre></td></tr></table></figure><p>至此我才想起来，大概在两周以前，我的电脑被一位前辈强行安装了一个mysql8.0，就是这个开机自启动的mysql8.0占用了我的3306。然后我进一步调查mysql服务的名字是什么</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">PS C:\Users\FredZhu&gt; Get-service<br>Status   Name               DisplayName<br>------   ----               -----------<br>Stopped  AarSvc_91a4f       Agent Activation ...<br>Stopped  AJRouter           AllJoyn Router Se...<br>…………<br>Running  MySQL80            MySQL80<br></code></pre></td></tr></table></figure><p>查出服务名称为MySQL80。接下来的操作就很明朗了，终止它之后并且检查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">PS C:\Users\FredZhu&gt; Stop-Service -Name MySQL80<br>PS C:\Users\FredZhu&gt; Get-Service -Name MySQL80<br><br>Status   Name               DisplayName<br><br>------   ----               -----------<br><br>Stopped  MySQL80            MySQL80<br></code></pre></td></tr></table></figure><p>另外提一下设置mysql80开机自启</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><br><span class="hljs-built_in">PS</span> C:\&gt; <span class="hljs-built_in">Get-Service</span> <span class="hljs-literal">-Name</span> MySQL80 | <span class="hljs-built_in">Select-Object</span> DisplayName, StartType<br><br>DisplayName StartType<br><span class="hljs-literal">-----------</span> <span class="hljs-literal">---------</span><br>MySQL80     Automatic<br></code></pre></td></tr></table></figure><p>使用此命令查看该服务的开机自启与否状态。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\&gt; <span class="hljs-built_in">Set-Service</span> <span class="hljs-literal">-Name</span> MySQL80 <span class="hljs-literal">-StartupType</span> Disabled<br><span class="hljs-built_in">PS</span> C:\&gt; <span class="hljs-built_in">Get-Service</span> <span class="hljs-literal">-Name</span> MySQL80 | <span class="hljs-built_in">Select-Object</span> DisplayName, StartType<br><br>DisplayName StartType<br><br><span class="hljs-literal">-----------</span> <span class="hljs-literal">---------</span><br><br>MySQL80      Disabled<br></code></pre></td></tr></table></figure><p>这里我们通过以上命令使得开机自启状态被关闭，并且我们经过再次核验确认，开机自启的选项确实已经被关闭。</p><p><strong>OK</strong>！</p><p>让我们再次启动一下看看！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sail">@LAPTOP-DK38CGUO:~/example-app$ ./vendor/bin/sail down<br>@LAPTOP-DK38CGUO:~/example-app$ ./vendor/bin/sail up<br></code></pre></td></tr></table></figure><p><img src="/./img/laravel/laravelHomepage.png" alt="laravel "></p><p>大功告成！</p><p>点击左下角的shop竟然还有周边商品可以购买，就是价格……<img src="/./img/laravel/shopOfLaravel.png" alt="the shop Of Laravel"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode数组基础题</title>
    <link href="/2023/06/14/LeetCode%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80%E9%A2%98/"/>
    <url>/2023/06/14/LeetCode%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="数组基础题"><a href="#数组基础题" class="headerlink" title="数组基础题"></a>数组基础题</h1><h2 id="leetcode-26"><a href="#leetcode-26" class="headerlink" title="leetcode 26"></a>leetcode 26</h2><p>问题简述：</p><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>这里大致有两种解法，第一种是双指针：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span>&#123;<br>    <span class="hljs-keyword">if</span>(nums.length==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> j= <span class="hljs-number">0</span>;<span class="hljs-comment">//慢指针</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;i&lt;nums.length;i++)&#123;<span class="hljs-comment">//快指针</span><br>        <span class="hljs-keyword">if</span>(nums[i]!=nums[j])&#123;<br>            j++;<br>            nums[j]=nums[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> j+<span class="hljs-number">1</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>这道题最重要的是先明确，并不需要把重复数据全部删除，只需要替换最前面的几个即可。比如说{0,0,1,1,2,2}，最终只需把它变为{0,1,2,1,2,2}即可而不是{0,1,2}。明确这一点，这题就好做多了。</p><p>这里初学者可能容易搞不清楚的是数组重复数据是如何被覆盖的，举个具体的例子，例如测试用例输入{0，0，0，1，1，2，3}。具体的操作过程将是这样的：在快指针i跑到1为止，j始终在原地，唯有等到i自增至3，这个时候才会执行以下判断语句，也就是j先自增变为1，之后将nums[j+1]也就是nums[1]变成num[i]也就是nums[3]的数。后面依此类推。</p><p>第二种写法是，利用<strong>LinkedHashSet</strong>内容不重复以及保证顺序的特性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicate1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span>&#123;<br>        LinkedHashSet&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>();<span class="hljs-comment">//</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n : nums)&#123;<br>            set.add(n);<span class="hljs-comment">//增强for循环将数组中数字塞入set中</span><br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j : set)&#123;<br>            nums[i++]=j;<br>        &#125;<span class="hljs-comment">//结合set特性，覆写原先的数组</span><br>        <span class="hljs-keyword">return</span> set.size();<span class="hljs-comment">//返回题目要求需要的数</span><br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javaの＝＝とequalsの違いは？</title>
    <link href="/2023/04/25/Java%E3%81%AE%EF%BC%9D%EF%BC%9D%E3%81%A8equals%E3%81%AE%E9%81%95%E3%81%84%E3%81%AF%EF%BC%9F/"/>
    <url>/2023/04/25/Java%E3%81%AE%EF%BC%9D%EF%BC%9D%E3%81%A8equals%E3%81%AE%E9%81%95%E3%81%84%E3%81%AF%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="＝＝とequalsの違いは？"><a href="#＝＝とequalsの違いは？" class="headerlink" title="＝＝とequalsの違いは？"></a>＝＝とequalsの違いは？</h1><ol><li><h3 id="と-equals-の違いは、次のようになります"><a href="#と-equals-の違いは、次のようになります" class="headerlink" title="== と equals の違いは、次のようになります"></a><code>==</code> と <code>equals</code> の違いは、次のようになります</h3><p> <code>==</code> 演算子は、比較しているオブジェクトの参照が同じかどうかをチェックします。つまり、比較しているオブジェクトが同じオブジェクトであるかどうかをチェックします。 一方、 <code>equals</code> メソッドは、オブジェクトの内容が同じであるかどうかをチェックします。</p></li><li><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isEqual</span> <span class="hljs-operator">=</span> str1.equals(str2);<span class="hljs-comment">//true</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isSameRef</span> <span class="hljs-operator">=</span> (str1 == str2);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p> これら 2 つの文字列オブジェクトがメモリ内の定数プールに格納され、実際には同じメモリ アドレスを指します。 これは、Java の文字列は不変オブジェクトであるため、同じ内容の複数の文字列オブジェクトを作成すると、それらはすべて定数プールに格納され、同じメモリ アドレスを指して、メモリ スペースの浪費を回避します。</p><p> したがって、”&#x3D;” 演算子を使用してこれら 2 つの文字列オブジェクトを比較すると、同じメモリ アドレスを指しているため、true が返されます。 equals() メソッドを使用してこれら 2 つの文字列オブジェクトを比較すると、同じ文字列コンテンツが格納されているため、true が返されます。</p></li><li><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isEqualUsingEquals</span> <span class="hljs-operator">=</span> str1.equals(str2); <span class="hljs-comment">// true</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isEqualUsingOperator</span> <span class="hljs-operator">=</span> (str1 == str2); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p> この例では、str1 と str2 には同じ文字列コンテンツが含まれていますが、異なるメモリ アドレスを指しています。 Java では、<strong>new キーワード</strong>を使用して作成されたオブジェクトは、<strong>毎回メモリ内に新しいインスタンス</strong>を作成するためです。</p><p> したがって、「&#x3D;」演算子を使用してこれら 2 つの文字列オブジェクトを比較すると、異なるメモリ アドレスを指しているため、false が返されます。 equals() メソッドを使用してこれら 2 つの文字列オブジェクトを比較すると、同じ文字列コンテンツが含まれているため、true が返されます。</p><h3 id="4-まとめ"><a href="#4-まとめ" class="headerlink" title="4.まとめ"></a>4.まとめ</h3><p> これらの例は、「&#x3D;」演算子が 2 つのオブジェクトの参照が同じかどうかを比較し、equals() メソッドが 2 つのオブジェクトに含まれる内容が等しいかどうかを比較することを示しています。 String 型のオブジェクトの場合、通常、「&#x3D;」演算子を使用するのではなく、equals() メソッドを使用して、含まれている文字列が等しいかどうかを比較します。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>java 面接質問</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卓球を上手にプレーする 中国の古典的で最強の卓球基礎指導</title>
    <link href="/2023/01/17/%E5%8D%93%E7%90%83%E3%82%92%E4%B8%8A%E6%89%8B%E3%81%AB%E3%83%97%E3%83%AC%E3%83%BC%E3%81%99%E3%82%8B-%E4%B8%AD%E5%9B%BD%E3%81%AE%E5%8F%A4%E5%85%B8%E7%9A%84%E3%81%A7%E6%9C%80%E5%BC%B7%E3%81%AE%E5%8D%93%E7%90%83%E5%9F%BA%E7%A4%8E%E6%8C%87%E5%B0%8E/"/>
    <url>/2023/01/17/%E5%8D%93%E7%90%83%E3%82%92%E4%B8%8A%E6%89%8B%E3%81%AB%E3%83%97%E3%83%AC%E3%83%BC%E3%81%99%E3%82%8B-%E4%B8%AD%E5%9B%BD%E3%81%AE%E5%8F%A4%E5%85%B8%E7%9A%84%E3%81%A7%E6%9C%80%E5%BC%B7%E3%81%AE%E5%8D%93%E7%90%83%E5%9F%BA%E7%A4%8E%E6%8C%87%E5%B0%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="第一集-第三集"><a href="#第一集-第三集" class="headerlink" title="第一集~第三集"></a><strong>第一集~第三集</strong></h1><h2 id="0、基本立ち方"><a href="#0、基本立ち方" class="headerlink" title="0、基本立ち方"></a><strong>0、基本立ち方</strong></h2><p><img src="/./img/tableTennis/575088415290490662.jpg" alt="立ち方"></p><h2 id="1、投げ方"><a href="#1、投げ方" class="headerlink" title="1、投げ方"></a><strong>1、投げ方</strong></h2><ul><li><ul><li><h3 id="ロースロー"><a href="#ロースロー" class="headerlink" title="ロースロー"></a><strong>ロースロー</strong></h3><p>手のひらが上向きで、手のひらが<strong>まっすぐ</strong>であることに注意してください。<br><img src="/./img/tableTennis/paoqiu.gif" alt="ひくい"></p></li><li><h3 id="上段投げ"><a href="#上段投げ" class="headerlink" title="上段投げ"></a><strong>上段投げ</strong></h3></li><li><p>ボールを投げる時、手のひらが台より少し沈み込みますが、下段よりも少し力を入れて加速して投げます。<br><img src="/./img/tableTennis/gaopao.gif" alt="たかい"></p></li></ul></li></ul><h2 id="2、基本的なフットワーク"><a href="#2、基本的なフットワーク" class="headerlink" title="2、基本的なフットワーク"></a><strong>2、基本的なフットワーク</strong></h2><h3 id="①サイドジャンプ"><a href="#①サイドジャンプ" class="headerlink" title="①サイドジャンプ"></a>①<strong>サイド</strong>ジャンプ</h3><p>左にジャンプするときは右足で地面を蹴り、右にジャンプするときは左足で地面を蹴り、歩幅を大きくします。</p><p><img src="/./img/tableTennis/cetiaobu.gif" alt="サイドジャンプ"></p><h3 id="②ステップジャンプ"><a href="#②ステップジャンプ" class="headerlink" title="②ステップジャンプ"></a>②ステップジャンプ</h3><p>平行跳びは横跳びに比べて歩幅が小さく、左右だけでなく斜め前後にも跳ぶことができます。 身体の進行方向で同じ側の足にもう一方の足が近いのが特徴です。</p><p><img src="/./img/tableTennis/bingbutiao.gif" alt="ステップジャンプ"></p><h3 id="③小さなスライディングステップ"><a href="#③小さなスライディングステップ" class="headerlink" title="③小さなスライディングステップ"></a>③小さなスライディングステップ</h3><p>ストライドが小さく、スピードが速く、体の重心が安定していて、重心が大きく変動しない.左右、または斜め前または後ろに移動することができます。</p><p><img src="/./img/tableTennis/suihuabu.gif" alt="小さな"></p><h3 id="④クロスステップ"><a href="#④クロスステップ" class="headerlink" title="④クロスステップ"></a>④クロスステップ</h3><p>左前にクロスするときは右足が左足の前を横切り、左右にクロスするときは右足が左足を横切り、次に右足を横切る。 周波数は徐々に加速する必要があり、腰はペースに合わせて回転できるように柔軟にする必要があります。</p><p><img src="/./img/tableTennis/jiaochabu.gif" alt="クロスステップ"></p><p><strong>つづく</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/17/hello-world/"/>
    <url>/2023/01/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
